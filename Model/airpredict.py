# -*- coding: utf-8 -*-
"""airPredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GAgjDDWNAuuFy1W0FUddanXoHj5O5hdP
"""


import pathlib

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs

dataset = pd.read_csv('/content/main_dataset_aqi.csv',
                      na_values = "?", comment='\t',
                      sep=",", skipinitialspace=True)

dataset.tail()

dataset = dataset.dropna()
dataset.isna().sum()

train_dataset = dataset.sample(frac=0.8,random_state=0)
test_dataset = dataset.drop(train_dataset.index)

sns.pairplot(train_dataset[["pm25", "rain", "wind", "temp"]], diag_kind="kde")

train_stats = train_dataset.describe()
train_stats.pop("pm25")
train_stats = train_stats.transpose()
train_stats

train_labels = train_dataset.pop('pm25')
test_labels = test_dataset.pop('pm25')

def norm(x):
  return (x - train_stats['mean']) / train_stats['std']
normed_train_data = norm(train_dataset)
normed_test_data = norm(test_dataset)

def build_model():
  model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[len(train_dataset.keys())]),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)
  ])

  optimizer = tf.keras.optimizers.RMSprop(0.001)

  model.compile(loss='mse',
                optimizer=optimizer,
                metrics=['mae', 'mse'])
  return model

model = build_model()
model.summary()

example_batch = normed_train_data[:10]
example_result = model.predict(example_batch)
example_result

plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)

model = build_model()

# The patience parameter is the amount of epochs to check for improvement
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

early_history = model.fit(normed_train_data, train_labels, 
                    epochs=1000, validation_split = 0.2, verbose=1, 
                    callbacks=[early_stop])

plotter.plot({'Early Stopping': early_history}, metric = "mae")
plt.ylim([0, 100])
plt.ylabel('MAE [pm25]')

loss, mae, mse = model.evaluate(normed_test_data, test_labels, verbose=1)

print("Testing set Mean Abs Error: {:5.2f} pm25".format(mae))

test_predictions = model.predict(normed_test_data).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [pm25]')
plt.ylabel('Predictions [pm25]')
lims = [0, 200]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims, lims)

error = test_predictions - test_labels
plt.hist(error, bins = 50)
plt.xlabel("Prediction Error [pm25]")
_ = plt.ylabel("Count")

from google.colab import drive
drive.mount('/content/gdrive')

import tensorflowjs as tfjs

tfjs_model = tfjs.converters.convert_tf_saved_model(saved_model_dir='/content/gdrive/My Drive/airPredict.pt',output_dir='/content/gdrive/My Drive/AirPredictjs')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

path = "/content/gdrive/My Drive/AirPredictLite" 
with tf.io.gfile.GFile('/content/gdrive/My Drive/AirPredictLite.tflite', 'wb') as f:
  f.write(tflite_model)